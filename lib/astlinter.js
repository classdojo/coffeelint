// Generated by CoffeeScript 1.3.3

/*
CoffeeLint

Copyright (c) 2011 Matthew Perpick.
Modified 2012 by gareth@classdojo.com (Gareth Aye)
CoffeeLint is freely distributable under the MIT license.
*/


(function() {
  var ASTLinter, CoffeeScript, coffeelint;

  coffeelint = require("./coffeelint");

  CoffeeScript = require("coffee-script");

  ASTLinter = (function() {

    function ASTLinter(source, config) {
      this.source = source;
      this.config = config;
      this.errors = [];
    }

    ASTLinter.prototype.lint = function() {
      try {
        this.node = CoffeeScript.nodes(this.source);
      } catch (coffeeError) {
        this.errors.push(this._parseCoffeeScriptError(coffeeError));
        return this.errors;
      }
      this.lintNode(this.node);
      return this.errors;
    };

    ASTLinter.prototype.lintNode = function(node) {
      var attrs, complexity, error, name, rule, _ref,
        _this = this;
      name = node.constructor.name;
      complexity = name === "If" || name === "While" || name === "For" || name === "Try" ? 1 : name === "Op" && ((_ref = node.operator) === "&&" || _ref === "||") ? 1 : name === "Switch" ? node.cases.length : 0;
      node.eachChild(function(childNode) {
        if (!childNode) {
          return false;
        }
        complexity += _this.lintNode(childNode);
        return true;
      });
      rule = this.config.cyclomatic_complexity;
      if (name === "Code" && complexity >= rule.value) {
        attrs = {
          context: complexity + 1,
          level: rule.level,
          line: 0
        };
        error = coffeelint.createError("cyclomatic_complexity", attrs);
        if (error) {
          this.errors.push(error);
        }
      }
      return complexity;
    };

    ASTLinter.prototype._parseCoffeeScriptError = function(coffeeError) {
      var attrs, lineNumber, match, message, rule;
      rule = coffeelint.Rule["coffeescript_error"];
      message = coffeeError.toString();
      lineNumber = -1;
      match = /line (\d)/.exec(message);
      if ((match != null ? match.length : void 0) > 1) {
        lineNumber = parseInt(match[1], 10);
      }
      attrs = {
        message: message,
        level: rule.level,
        lineNumber: lineNumber
      };
      return coffeelint.createError("coffeescript_error", attrs);
    };

    return ASTLinter;

  })();

  module.exports = ASTLinter;

}).call(this);
